div.modal.fade id="manage-redact-modal" tabindex="-1" role="dialog" aria-labelledby="manage-redact-modal-title" aria-hidden=true
    div.modal-dialog role="document" style="max-width: 65%;"
        div.modal-content
          = form_with(url: update_redact_labels_app_group_path, method: 'patch', local: true, id: 'update-redact' )
            div.modal-header
                h5.modal-title#manage-redact-modal-title
                    = "Redact PII Data: #{app_group}"
                button.close data-dismiss="modal" aria-label="close" type="button"
                    span aria-hidden=true
                        | &times;
            div.modal-body
                table.table
                  thead
                    tr
                      th[scope="col"]
                        | Rule Type
                      th[scope="col"]
                        | Key to redact
                      th[scope="col"]
                        | Rule
                      th[scope="col"]
                        | Masking Start
                        div#maskedcharstart
                          | (?)
                      th[scope="col"]
                        | Masking End
                        div#maskedcharend
                          | (?)
                      - if @allow_manage_redact
                        th[scope="col"]
                            | Actions
                  tbody#redact-body
            div.modal-footer style="display: flex; justify-content: space-between; align-items: center;"
                div#info
                  | * JsonPath Rules: Provide exact json path of the key to be redacted. Eg: user.details.email
                  br
                  | * Static Rules: Provide the regex pattern to match your logs with. Eg: [a-z]+@[a-z]+\\.com
                div#buttons style="display: flex; gap: 10px;"
                  - if @allow_manage_redact
                    button#remove-all-redact.btn.btn-danger type="button"
                        | Remove all labels 
                    button#add-redact.btn.btn-success type="button" 
                        | Add label
                    button#submit-redact.btn.btn-primary type="submit"
                        | Update


javascript:
    const redact = #{redact_labels.to_json.html_safe}
    const allow_manage_redact = #{allow_manage_redact}

    const removeAllredact = () => {
        const rows = $(`tbody#redact-body tr[data-idx]`)
        for (let row of rows) {
            row.remove()
        }
    }

    const removeredact = idx => {
        let row = $(`tbody#redact-body tr[data-idx="${idx}"]`)
        if (row.length < 1) {
            console.log(`rows with redact ${idx} not found`)
        }

        row[0].remove()
    }

    const generateRowRedact = (key, val, idx, type, start = 0, end = 0) => {
            let delete_button = ""
            if (allow_manage_redact) {
                delete_button = ` <td>
                    <button class="btn btn-sm btn-danger" data-idx="${idx}" id="remove-redact" type="button">
                        <i class="far fa-trash-alt"></i>
                    </button>
                </td>`
            }
            return `<tr data-idx="${idx}">
                <td>
                    <select class="form-control" name=types[] id="type" value="${type}" ${allow_manage_redact ? "" : "disabled"}>
                      <option value="jsonPath" ${type === "jsonPath" ? "selected" : ""}>Json Path</option>
                      <option value="static" ${type === "static" ? "selected" : ""}>Static Rule</option>
                    </select>
                </td>
                <td>
                    <input class="form-control" name=keys[] value="${key}" ${allow_manage_redact ? "" : "disabled"}>
                </td>
                <td>
                    <textarea class="form-control" name="values[]" ${allow_manage_redact ? "" : "disabled"}>${val}</textarea>
                </td>
                <td>
                    <input class="form-control" type="number" name=hintCharStart[] value="${start}" min="0" step="1" oninput="this.value = Math.max(0, this.value)" ${allow_manage_redact ? "" : "disabled"}>
                </td>
                <td>
                    <input class="form-control" type="number" name=hintCharEnd[] value="${end}" min="0" step="1" oninput="this.value = Math.max(0, this.value)" ${allow_manage_redact ? "" : "disabled"}>
                </td>
                ${delete_button}          
            </tr>`
        }

    const addredact = (key, val, idx) => {
        let tbody = $('tbody#redact-body')
        let lastIdx = idx || Number($(tbody.children().last()).attr('data-idx'))+1
        let lastKey = key || ""
        let lastVal = val?.value || ""
        let lastType = val?.type || ""
        let lastHintCharStart = val?.hintCharStart || "0"
        let lastHintCharEnd = val?.hintCharEnd || "0"

        tbody.append(generateRowRedact(lastKey, lastVal, lastIdx, lastType, lastHintCharStart, lastHintCharEnd))
    }

    const getIdFromClickedButtonRedact = event => {
        return event.currentTarget.id
    }

    const getRowNumberFromClickedButtonRedact = event => {
        return $(event.currentTarget).attr('data-idx')
    }

    const onModalButtonClickedRedact = event => {
        const buttonId = getIdFromClickedButtonRedact(event)
        switch(buttonId) {
            case "remove-all-redact":
                removeAllredact()
                break
            case "remove-redact":
                const idx = getRowNumberFromClickedButtonRedact(event)
                removeredact(idx)
                break
            case "add-redact":
                addredact()
                break
        }
    }

    const removeAppNameFieldRedact = () => {
        $(`input[name="app_name"]`).remove()
    }

    const resetModalFieldsRedact = () => {
        removeAllredact()
        removeAppNameFieldRedact()
        modifyTitleRedact(`Redact PII Data: #{app_group}`)
        modifyFormActionRedact(`#{update_redact_labels_app_group_path}`)
    }

    const getApplicationURLFromClickedButtonRedact = event => {
        return $(event.relatedTarget).attr('data-app-path')
    }
    const getApplicationNameFromClickedButtonRedact = event => {
        return $(event.relatedTarget).attr('data-app-name') 
    }
    const isManageAppGroupredactEvent = event => {
        return getApplicationNameFromClickedButtonRedact(event) === undefined
    }

    const modifyTitleRedact = text => {
        $('#manage-redact-modal-title').text(text)
    }

    const modifyFormActionRedact = action => {
        $('form#update-redact').attr('action', action) 
    }

    const modifyModalForManageApplicationredact = event => {
        let appName = getApplicationNameFromClickedButtonRedact(event)
        modifyFormActionRedact(getApplicationURLFromClickedButtonRedact(event))
        modifyTitleRedact(`Redact PII data: #{app_group}: ${appName}`)

        $('tbody#redact-body').append(`<input type="hidden" name="app_name" value="${appName}">`)

        return appName
    }

    const showCurrentredact = redact => {
        Object.keys(redact).map((key, idx) => addredact(key, redact[key], idx+1))
    }

    const onModalOpenRedact = event => {
        resetModalFieldsRedact()

        let shownredact = []
        if (isManageAppGroupredactEvent(event)) {
            shownredact = redact['app-group']
        } else {
            let appName = modifyModalForManageApplicationredact(event)
            shownredact = redact[appName]
        }

        showCurrentredact(shownredact)
    }

    // triggered when the modal is opened

    $('body').on('click', '#manage-redact-modal button.btn', onModalButtonClickedRedact)
    $('#manage-redact-modal').on('show.bs.modal', onModalOpenRedact)
