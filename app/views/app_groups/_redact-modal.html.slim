div.modal.fade id="manage-redact-modal" tabindex="-1" role="dialog" aria-labeledby="manage-redact-modal-title" aria-hidden=true
    div.modal-dialog role="document"
        div.modal-content
            = form_with(url: update_labels_app_group_path, method: 'patch', local: true, id: 'update-redacts')
            div.modal-header
                h5.modal-title#manage-redact-modal-title
                    = "Manage PII Redact Data Rules #{app_group}"
                button.close data-dismiss="modal" aria-label="close" type="button"
                    span aria-hidden=true
                        | &times;
            div.modal-body
                table.table
                  thead
                    tr
                      th[scope="col"]
                        | PII
                      th[scope="col"]
                        | Value
                      - if @allow_manage_labels
                        th[scope="col"]
                            | Actions
                  tbody#redact-body
            div.modal-footer
                - if @allow_manage_labels
                    button#remove-all-redacts.btn.btn-danger type="button"
                        | remove all PII
                    button#add-redact.btn.btn-success type="button" 
                        | add PII
                    button#submit-redact.btn.btn-primary type="submit"
                        | update

javascript:
    const redacts = #{labels.to_json.html_safe}
    const allow_manage_redacts = #{allow_manage_labels}

    const removeAllRedacts = () => {
        const rows = $(`tbody#redact-body tr[data-idx]`)
        for (let row of rows) {
            row.remove()
        }
    }

    const removeRedact = idx => {
        let row = $(`tbody#redact-body tr[data-idx="${idx}"]`)
        if (row.length < 1) {
            console.log(`rows with redact ${idx} not found`)
        }

        row[0].remove()
    }

    const generateRowRedact = (pii, val, idx) => {
            let delete_button = ""
            if (allow_manage_labels) {
                delete_button = ` <td>
                    <button class="btn btn-sm btn-danger" data-idx="${idx}" id="remove-redact" type="button">
                        <i class="far fa-trash-alt"></i>
                    </button>
                </td>`
            }
            return `<tr data-idx="${idx}">
                <td>
                    <input class="form-control" name=piis[] value="${pii}" ${allow_manage_labels ? "" : "disabled"}>
                </td>
                <td>
                <input class="form-control" name=values[] value="${val}" ${allow_manage_labels ? "" : "disabled"}>
                </td>
                ${delete_button}          
            </tr>`
            console.log("Generated row:", row);
            return row;
        }

    const addRedact = (pii, val, idx) => {
        console.log("Adding label:", pii, val, idx)
        let tbody = $('tbody#redact-body')
        let lastIdx = idx || Number($(tbody.children().last()).attr('data-idx'))+1
        let lastPii = pii || ""
        let lastVal = val || ""
        tbody.append(generateRowRedact(lastPii, lastVal, lastIdx))
    }

    const getIdFromClickedButtonRedact = event => {
        return event.currentTarget.id
    }

    const getRowNumberFromClickedButtonRedact = event => {
        return $(event.currentTarget).attr('data-idx')
    }

    const onModalButtonClickedRedact = event => {
        console.log("Button clicked:", event.currentTarget.id)
        const buttonId = getIdFromClickedButtonRedact(event)
        switch(buttonId) {
            case "remove-all-redacts":
                removeAllRedacts()
                break
            case "remove-redact":
                const idx = getRowNumberFromClickedButtonRedact(event)
                removeRedact(idx)
                break
            case "add-redact":
                addRedact()
                break
        }
    }

    const removeAppNameFieldRedact = () => {
        $(`input[name="app_name"]`).remove()
    }

    const resetModalFieldsRedact = () => {
        removeAllRedacts()
        removeAppNameFieldRedact()
        modifyTitle(`Manage PII redact Data #{app_group}`)
        modifyFormAction(`#{update_labels_app_group_path}`)
    }

    const getApplicationURLFromClickedButtonRedact = event => {
        return $(event.relatedTarget).attr('data-app-path')
    }
    const getApplicationNameFromClickedButtonRedact = event => {
        return $(event.relatedTarget).attr('data-app-name') 
    }
    const isManageAppGroupRedactsEventRedact = event => {
        return getApplicationNameFromClickedButtonRedact(event) === undefined
    }

    const modifyTitleRedact = text => {
        $('#manage-redact-modal-title').text(text)
    }

    const modifyFormActionRedact = action => {
        $('form#update-redacts').attr('action', action) 
    }

    const modifyModalForManageApplicationRedacts = event => {
        let appName = getApplicationNameFromClickedButtonRedact(event)
        modifyFormAction(getApplicationURLFromClickedButtonRedact(event))

        modifyTitleRedact(`Manage PII Redact Data #{app_group}: ${appName}`)

        $('tbody#redact-body').append(`<input type="hidden" name="app_name" value="${appName}">`)

        return appName
    }

    const showCurrentRedacts = redacts => {
        Object.piis(redacts).map((pii, idx) => addRedact(pii, redacts[pii], idx+1))
    }

    const onModalOpenRedact = event => {
        resetModalFieldsRedact()

        let shownRedact = []
        if (isManageAppGroupRedactsEvent(event)) {
            shownRedact = redacts['app-group']
        } else {
            let appName = modifyModalForManageApplicationRedacts(event)
            shownRedact = redacts[appName]
        }

        showCurrentRedacts(shownRedact)
    }

    if (typeof $ === 'undefined') {
        console.log("jQuery is not loaded!");
    } else {
        console.log("jQuery is loaded and ready to use.");
    }

    $('body').on('click', '#manage-redact-modal button.btn', onModalButtonClickedRedact)
    $('#manage-redact-modal').on('show.bs.modal', onModalOpen)